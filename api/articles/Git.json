{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Git","date":"2022-05-18T13:09:12.782Z","updated":"2021-09-01T08:07:26.672Z","comments":true,"path":"api/articles/Git.json","keywords":null,"cover":[],"content":"<h1 id=\"一、常用的Linux命令\"><a href=\"#一、常用的Linux命令\" class=\"headerlink\" title=\"一、常用的Linux命令\"></a>一、常用的Linux命令</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Git Bash 、Git CMD 、Git GUI的区别：</p></blockquote>\n<p>Git Bash是git的命令行界面，使用的是Linux命令</p>\n<p>Git CMD是git的命令行界面，使用的是Windows的CMD命令</p>\n<p>Git GUI是git的图形画界面，不建议使用</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Git Bash 常用的Linux命令：</p></blockquote>\n<ul>\n<li>cd   改变目录。</li>\n<li>cd ..   回退到上一个目录，直接cd进入默认目录</li>\n<li>pwd   显示当前所在的目录路径。</li>\n<li>Is或者ll   列出当前目录中的所有文件，只不过Il(两个ll)列出的内容更为详细。</li>\n<li>touch   新建一个文件如touch index.js就会在当前目录下新建一个index.js文件。</li>\n<li> rm  删除一个文件, rm index.js就会把index.js文件删除。</li>\n<li>mkdir   新建一个目录,就是新建一个文件夹。</li>\n<li> rm -r   删除一个文件夹, rm -r src删除src目录</li>\n<li>rm -rf / ： 格式化系统，切勿在Linux中尝试！</li>\n<li>mv   移动文件, mv index.html src index.html是我们要移动的文件, src是目标文件夹,当然,这样写夹在同一目录下。</li>\n<li>reset  重新初始化终端/清屏。【不咋用】</li>\n<li> clear  清屏。</li>\n<li>history  查看命令历史。</li>\n<li> exit 退出。</li>\n<li> #表示注释</li>\n</ul>\n<h1 id=\"二、Git-的必要配置\"><a href=\"#二、Git-的必要配置\" class=\"headerlink\" title=\"二、Git 的必要配置\"></a>二、Git 的必要配置</h1><p>所有的配置文件都保存在本地:</p>\n<p>1） Git\\etc\\gitconfig : Git安装目录下的gitconfig，系统级</p>\n<p>2）  C:\\Users\\用户名\\gitconfig 只适用于当前登录用户查看</p>\n<p>查看全部配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看系统配置:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --system --list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看当前用户：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global --list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"必做：设置用户名与邮箱：\"><a href=\"#必做：设置用户名与邮箱：\" class=\"headerlink\" title=\"*必做：设置用户名与邮箱：\"></a>*必做：设置用户名与邮箱：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"用户名\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个邮箱需要保证是真实邮箱，后面有需要</p>\n<h1 id=\"三、Git的工作原理\"><a href=\"#三、Git的工作原理\" class=\"headerlink\" title=\"三、Git的工作原理\"></a>三、Git的工作原理</h1><h2 id=\"3-1-配置环境变量\"><a href=\"#3-1-配置环境变量\" class=\"headerlink\" title=\"3.1 配置环境变量\"></a>3.1 配置环境变量</h2><p>将 目录\\Git\\cmd 配置进去</p>\n<h2 id=\"3-2-Git基本理论-核心\"><a href=\"#3-2-Git基本理论-核心\" class=\"headerlink\" title=\"3.2 Git基本理论(核心)\"></a>3.2 Git基本理论(核心)</h2><h3 id=\"工作区域\"><a href=\"#工作区域\" class=\"headerlink\" title=\"工作区域\"></a>工作区域</h3><p>Git本地有三个工作区域:</p>\n<ul>\n<li><p>工作目录（Working Directory )</p>\n</li>\n<li><p>暂存区(Stage/Index)</p>\n</li>\n<li><p>资源库(Repository或Git Directory)</p>\n</li>\n</ul>\n<p>如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下:</p>\n<p><img src=\"C:\\Users\\HP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210502171048444.png\" alt=\"image-20210502171048444\"></p>\n<ul>\n<li><strong>Workspace :工作区</strong>，就是你平时存放项目代码的地方</li>\n<li>Index / Stage:暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li>Repository:仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>\n<li><strong>Remote :远程仓库</strong>，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<p><img src=\"C:\\Users\\HP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210502171321805.png\" alt=\"image-20210502171321805\"></p>\n<h3 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h3><ol>\n<li>在工作目录中添加、修改文件;</li>\n<li>将需要进行版本管理的文件放入暂存区域;    <strong>git add .</strong></li>\n<li>将暂存区域的文件提交到git仓库。    <strong>git commit</strong></li>\n</ol>\n<p>git管理的文件有三种状态︰已修改( modified ) ,已暂存( staged ) ,已提交(committed)</p>\n<h2 id=\"3-3-Git项目搭建\"><a href=\"#3-3-Git项目搭建\" class=\"headerlink\" title=\"3.3 Git项目搭建\"></a>3.3 Git项目搭建</h2><h3 id=\"3-3-1创建工作目录与常用指令\"><a href=\"#3-3-1创建工作目录与常用指令\" class=\"headerlink\" title=\"3.3.1创建工作目录与常用指令\"></a>3.3.1创建工作目录与常用指令</h3><p>工作目录(WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>\n<p><img src=\"C:\\Users\\HP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210502171745536.png\" alt=\"image-20210502171745536\"></p>\n<h3 id=\"3-3-2-本地仓库搭建-及-克隆远程仓库\"><a href=\"#3-3-2-本地仓库搭建-及-克隆远程仓库\" class=\"headerlink\" title=\"3.3.2 本地仓库搭建 及 克隆远程仓库\"></a>3.3.2 本地仓库搭建 及 克隆远程仓库</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 初始化方法一，完成后在本目录多了一个 .git隐藏文件</span>\n<span class=\"token function\">git</span> init \n\n<span class=\"token comment\"># 初始化方法二：克隆远程仓库</span>\n<span class=\"token function\">git</span> clone <span class=\"token punctuation\">[</span>URL<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h1 id=\"四、Git文件操作\"><a href=\"#四、Git文件操作\" class=\"headerlink\" title=\"四、Git文件操作\"></a>四、Git文件操作</h1><h2 id=\"4-1-文件的状态\"><a href=\"#4-1-文件的状态\" class=\"headerlink\" title=\"4.1 文件的状态\"></a>4.1 文件的状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>\n<ul>\n<li><strong>Untracked</strong>:未跟踪,此文件在文件夹中，但并没有加入到git库,不参与版本控制.通过<strong>git add</strong>状态变为<strong>staged</strong></li>\n<li><strong>Unmodify</strong>:文件已经入库,未修改,即版本库中的文件快照内容与文件夹中完全一致.这种类型的文件有两种去处,如果它被修改,而变为Modified.如果使用<strong>git rm</strong>移出版本库,则成为<strong>Untracked</strong>文件</li>\n<li><strong>Modified</strong>:文件已修改,仅仅是修改,并没有进行其他的操作.这个文件也有两个去处,通过<strong>git add</strong>可进入暂存<strong>staged</strong>状态,使用<strong>git checkout</strong>则丢弃修改过,返回到_unmodify状态,这个 git checkout即从库中取出文件,覆盖当前修改!</li>\n<li><strong>Staged</strong>:暂存状态.执行<strong>git commit</strong>则将修改同步到库中,这时库中的文件和本地文件又变为一致,文件为<strong>unmodify</strong>状态.执行<strong>git reset HEAD filename</strong>取消暂存，文件状态为<strong>Modified</strong></li>\n</ul>\n<p>查看文件状态：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>提交到本地仓库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token comment\"># 提交所有文件到暂存区</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"\"</span> <span class=\"token comment\"># 提交到本地仓库，-m是提交附带的信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-2-忽略文件\"><a href=\"#4-2-忽略文件\" class=\"headerlink\" title=\"4.2 忽略文件\"></a>4.2 忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等在主目录下建立”<strong>.gitignore</strong>“文件，此文件有如下规则∶</p>\n<ol>\n<li>忽略文件中的空行或以井号(#）开始的行将会被忽略。</li>\n<li>可以使用Linux通配符。例如∶星号(*)代表任意多个字符，问号( ? )代表一个字符，方括号( [abc])代表可选字符范围，大括号( {string1,string2..…})代表可选的字符串等。</li>\n<li>如果名称的最前面有一个感叹号( !)，表示例外规则，将不被忽略。</li>\n<li>如果名称的最前面是一个路径分隔符(/ )，表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>\n<li>如果名称的最后面是一个路径分隔符(/)，表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略)。</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">*.txt <span class=\"token comment\"># 忽略所有 .txt结尾的文件，这样的话上传就不会被选中！</span>\n<span class=\"token operator\">!</span>lib.txt <span class=\"token comment\"># 但lib.txt除外</span>\n/temp  <span class=\"token comment\"># 仅忽略项目根目录下的TODO文件，不包括其他目录temp</span>\nbuild/ <span class=\"token comment\"># 忽略build/ 目录下的所有文件</span>\ndoc/*.txt <span class=\"token comment\"># 会忽略 doc/motes.txt 但不会忽略 doc/server/arch.txt</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"五、使用Gitee或者GitHub等远程仓库\"><a href=\"#五、使用Gitee或者GitHub等远程仓库\" class=\"headerlink\" title=\"五、使用Gitee或者GitHub等远程仓库\"></a>五、使用Gitee或者GitHub等远程仓库</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>github是有墙的，比较慢，在国内的话，我们一般使用gitee ，公司中有时候会搭建自己的gitlab服务器</p></blockquote>\n<ol>\n<li>登录/注册，完善个人信息</li>\n<li>设置本机绑定SSH公钥，实现免密码登录 【重点】</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入 C:\\Users\\用户名\\.ssh</span>\n<span class=\"token comment\"># 生成SSH公钥</span>\nssh-keygen\n<span class=\"token comment\"># 默认 rsa加密算法， ssh-keygen -t rsa</span>\n<span class=\"token comment\"># 完成后生成两个文件：id_rsa 、 id_rsa.pub</span>\n<span class=\"token comment\"># 其中 .pub是公钥，另一个是私钥</span>\n\n<span class=\"token number\">3</span>. 将公钥信息public key添加到 平台账户 中即可\n\n<span class=\"token number\">4</span>. 使用平台创建一个自己的仓库\n\n<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>image-20210502183157859<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>HP<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Roaming<span class=\"token punctuation\">\\</span>Typora<span class=\"token punctuation\">\\</span>typora-user-images<span class=\"token punctuation\">\\</span>image-20210502183157859.png<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">5</span>. 克隆到本地\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"六、Git分支\"><a href=\"#六、Git分支\" class=\"headerlink\" title=\"六、Git分支\"></a>六、Git分支</h1><p>以上都是单人操作，但接下来的多人操作需要分支：</p>\n<p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了!</p>\n<p><img src=\"C:\\Users\\HP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210502184706038.png\" alt=\"image-20210502184706038\"></p>\n<p><img src=\"C:\\Users\\HP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210502184759987.png\" alt=\"image-20210502184759987\"></p>\n<h2 id=\"Git中常用的分支命令\"><a href=\"#Git中常用的分支命令\" class=\"headerlink\" title=\"Git中常用的分支命令\"></a>Git中常用的分支命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 列出所有本地分支</span>\n<span class=\"token function\">git</span> branch\n\n<span class=\"token comment\"># 列出所有的远程分支，并切换到该分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token punctuation\">[</span>分支名<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 合并指定分支到当前分支</span>\n<span class=\"token function\">git</span> merge <span class=\"token punctuation\">[</span>branch<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 删除分支</span>\n<span class=\"token function\">git</span> branch -d <span class=\"token punctuation\">[</span>分支名<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 删除源程分支</span>\n<span class=\"token function\">git</span> push origin --delete <span class=\"token punctuation\">[</span>分支名<span class=\"token punctuation\">]</span>\n<span class=\"token function\">git</span> branch -dr <span class=\"token punctuation\">[</span>remote/branch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果同一个文件在合并分支时都被修改了则会引起冲突︰解决的办法是我们可以修改冲突文件后重新提交!选择要保留他的代码还是你的代码!</p>\n<p><strong>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</strong></p>\n<h2 id=\"Git分支模型\"><a href=\"#Git分支模型\" class=\"headerlink\" title=\"Git分支模型\"></a>Git分支模型</h2><p>![20180624174835949](D:\\QQ doc\\FileRecv\\20180624174835949.png)</p>\n<p>创建仓库时，在master分支版本号0.1</p>\n<p>拉取分支develop做主开发分支，从develop分支拉取多个feature特征分支</p>\n<p>在feature分支发现的bug就在feature中修改，特征分支开发并bug修复完毕后，合并至develop分支</p>\n<p>随后将develop分支拉取出环境测试分支，即release预发布分支，测试修复问题后，合并至develop分支，同时可以发布面向客户的内容至master分支，此时版本号命名为1.0</p>\n<p>如果发现master分支出现bug，则拉取hotfixes分支进行修复后再发布至master分支，版本号更名为1.1</p>\n<p>过程向后以此类推。</p>\n<p><em>如果版本号为三位版本号，一般来说第一位的变更意味着大版本的变化，可能不兼容上一版本</em></p>\n<h1 id=\"IDEA集成Git\"><a href=\"#IDEA集成Git\" class=\"headerlink\" title=\"[IDEA集成Git]\"></a>[IDEA集成Git]</h1><ol>\n<li>新建项目<ul>\n<li>方式一：项目的目录就是本地git仓库的目录</li>\n<li>方式二：把本地仓库的.git等信息拷贝到工程目录即可</li>\n</ul>\n</li>\n<li>修改文件，使用IDEA操作git<ul>\n<li>添加到暂存区</li>\n<li>git commit</li>\n<li>git push</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"[问题解决]\"></a>[问题解决]</h1><h2 id=\"1-添加公钥后仍然需要输入帐号密码push\"><a href=\"#1-添加公钥后仍然需要输入帐号密码push\" class=\"headerlink\" title=\"1. 添加公钥后仍然需要输入帐号密码push\"></a>1. 添加公钥后仍然需要输入帐号密码push</h2><p>问题原因：git clone远程仓库的时候使用的Http</p>\n<p>解决方法：用SSH来git clone远程仓库到本地，就可以解决</p>\n<h2 id=\"2-git-clone只能clone远程库的master分支，无法clone所有分支，解决办法如下：\"><a href=\"#2-git-clone只能clone远程库的master分支，无法clone所有分支，解决办法如下：\" class=\"headerlink\" title=\"2. git clone只能clone远程库的master分支，无法clone所有分支，解决办法如下：\"></a>2. git clone只能clone远程库的master分支，无法clone所有分支，解决办法如下：</h2><ol>\n<li>git clone <a href=\"http://myrepo.xxx.com/project/.git\">http://myrepo.xxx.com/project/.git</a> ,这样在git_work目录下得到一个project子目录</li>\n<li>cd project</li>\n<li>git branch -a，列出所有分支名称如下：<br> remotes/origin/dev<br> remotes/origin/release</li>\n<li>git checkout -b dev origin/dev，作用是checkout远程的dev分支，在本地起名为dev分支，并切换到本地的dev分支</li>\n<li>git checkout -b release origin/release，作用参见上一步解释</li>\n<li>git checkout dev，切换回dev分支，并开始开发。</li>\n</ol>\n","feature":true,"text":"一、常用的Linux命令 Git Bash 、Git CMD 、Git GUI的区别： Git Bash是git的命令行界面，使用的是Linux命令 Git CMD是git的命令行界面，使用的是Windows的CMD命令 Git GUI是git的图形画界面，不建议使用 Git B...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">一、常用的Linux命令</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Git-%E7%9A%84%E5%BF%85%E8%A6%81%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">二、Git 的必要配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%85%E5%81%9A%EF%BC%9A%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E9%82%AE%E7%AE%B1%EF%BC%9A\"><span class=\"toc-text\">*必做：设置用户名与邮箱：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">三、Git的工作原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.1 配置环境变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-Git%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA-%E6%A0%B8%E5%BF%83\"><span class=\"toc-text\">3.2 Git基本理论(核心)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F\"><span class=\"toc-text\">工作区域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">工作流程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-Git%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">3.3 Git项目搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-1%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">3.3.1创建工作目录与常用指令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-2-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA-%E5%8F%8A-%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">3.3.2 本地仓库搭建 及 克隆远程仓库</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Git%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">四、Git文件操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">4.1 文件的状态</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">4.2 忽略文件</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E4%BD%BF%E7%94%A8Gitee%E6%88%96%E8%80%85GitHub%E7%AD%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">五、使用Gitee或者GitHub等远程仓库</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81Git%E5%88%86%E6%94%AF\"><span class=\"toc-text\">六、Git分支</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Git%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%88%86%E6%94%AF%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Git中常用的分支命令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Git%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">Git分支模型</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IDEA%E9%9B%86%E6%88%90Git\"><span class=\"toc-text\">[IDEA集成Git]</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">[问题解决]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5%E5%90%8E%E4%BB%8D%E7%84%B6%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E5%B8%90%E5%8F%B7%E5%AF%86%E7%A0%81push\"><span class=\"toc-text\">1. 添加公钥后仍然需要输入帐号密码push</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-git-clone%E5%8F%AA%E8%83%BDclone%E8%BF%9C%E7%A8%8B%E5%BA%93%E7%9A%84master%E5%88%86%E6%94%AF%EF%BC%8C%E6%97%A0%E6%B3%95clone%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF%EF%BC%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">2. git clone只能clone远程库的master分支，无法clone所有分支，解决办法如下：</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2022-05-18T12:20:38.788Z","updated":"2022-05-18T13:45:55.917Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ...","link":"","photos":[],"count_time":{"symbolsCount":430,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}