{"title":"Nginx简单应用及配置模板","uid":"637365ccb3eb125c455d5b7283ecb983","slug":"Nginx简单应用","date":"2021-04-30T16:00:00.000Z","updated":"2022-05-18T13:49:12.849Z","comments":true,"path":"api/articles/Nginx简单应用.json","keywords":null,"cover":[],"content":"<h1 id=\"Nginx概述\"><a href=\"#Nginx概述\" class=\"headerlink\" title=\"Nginx概述\"></a>Nginx概述</h1><p>Nginx (engine x)是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</p>\n<h1 id=\"Nginx常用命令\"><a href=\"#Nginx常用命令\" class=\"headerlink\" title=\"Nginx常用命令\"></a>Nginx常用命令</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /usr/local/nginx/sbin/\n./nginx <span class=\"token comment\">#启动</span>\n./nginx -s stop   <span class=\"token comment\"># 停止</span>\n./nginx -s quit   <span class=\"token comment\"># 安全退出</span>\n./nginx -s reload <span class=\"token comment\"># 重新加载配置文件</span>\n<span class=\"token function\">ps</span> auxlgrep nginx <span class=\"token comment\"># 查看nginx进程</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Nginx语法匹配规则\"><a href=\"#Nginx语法匹配规则\" class=\"headerlink\" title=\"Nginx语法匹配规则\"></a>Nginx语法匹配规则</h1><p>语法规则： location [=|<del>|</del>*|^~] /uri/ { … }</p>\n<ul>\n<li>= 开头表示精确匹配</li>\n<li>^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。</li>\n<li>~ 开头表示区分大小写的正则匹配</li>\n<li>~* 开头表示不区分大小写的正则匹配</li>\n<li>!~ 和 !~*分别为区分大小写不匹配及不区分大小写不匹配 的正则</li>\n<li>/ 通用匹配，任何请求都会匹配到。</li>\n</ul>\n<p>多个location配置的情况下匹配顺序为（参考资料而来，还未实际验证，试试就知道了，不必拘泥，仅供参考）：首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p>\n<p>例子，有如下匹配规则：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">location <span class=\"token operator\">=</span> / <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\"># 精确匹配，必须是127.0.0.1/</span>\n\n<span class=\"token comment\">#规则A</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation <span class=\"token operator\">=</span> /login <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\"># 精确匹配，必须是127.0.0.1/login</span>\n\n<span class=\"token comment\">#规则B</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation ^~ /static/ <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\"># 非精确匹配，并且不区分大小写，比如127.0.0.1/static/js.</span>\n\n<span class=\"token comment\">#规则C</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation ~ <span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>gif<span class=\"token operator\">|</span>jpg<span class=\"token operator\">|</span>png<span class=\"token operator\">|</span>js<span class=\"token operator\">|</span>css<span class=\"token punctuation\">)</span>$ <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\"># 区分大小写，以gif,jpg,js结尾</span>\n\n<span class=\"token comment\">#规则D</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation ~* <span class=\"token punctuation\">\\</span>.png$ <span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\"># 不区分大小写，匹配.png结尾的</span>\n\n<span class=\"token comment\">#规则E</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation <span class=\"token operator\">!</span>~ <span class=\"token punctuation\">\\</span>.xhtml$ <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\"># 区分大小写，匹配不已.xhtml结尾的</span>\n\n<span class=\"token comment\">#规则F</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation <span class=\"token operator\">!</span>~* <span class=\"token punctuation\">\\</span>.xhtml$ <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">#规则G</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation / <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\"># 什么都可以</span>\n\n<span class=\"token comment\">#规则H</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么产生的效果如下：</p>\n<ul>\n<li>访问根目录/， 比如<a href=\"http://localhost/\">http://localhost/</a> 将匹配规则A</li>\n<li>访问 <a href=\"http://localhost/login\">http://localhost/login</a> 将匹配规则B，<a href=\"http://localhost/register\">http://localhost/register</a> 则匹配规则H</li>\n<li>访问 <a href=\"http://localhost/static/a.html\">http://localhost/static/a.html</a> 将匹配规则C</li>\n<li>访问 <a href=\"http://localhost/a.gif\">http://localhost/a.gif</a>, <a href=\"http://localhost/b.jpg\">http://localhost/b.jpg</a> 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用， 而 <a href=\"http://localhost/static/c.png\">http://localhost/static/c.png</a> 则优先匹配到 规则C</li>\n<li>访问 <a href=\"http://localhost/a.PNG\">http://localhost/a.PNG</a> 则匹配规则E， 而不会匹配规则D，因为规则E不区分大小写。</li>\n<li>访问 <a href=\"http://localhost/a.xhtml\">http://localhost/a.xhtml</a> 不会匹配规则F和规则G，<a href=\"http://localhost/a.XHTML%E4%B8%8D%E4%BC%9A%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99G%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E3%80%82%E8%A7%84%E5%88%99F%EF%BC%8C%E8%A7%84%E5%88%99G%E5%B1%9E%E4%BA%8E%E6%8E%92%E9%99%A4%E6%B3%95%EF%BC%8C%E7%AC%A6%E5%90%88%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E4%BD%86%E6%98%AF%E4%B8%8D%E4%BC%9A%E5%8C%B9%E9%85%8D%E5%88%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E6%83%B3%E6%83%B3%E7%9C%8B%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%AD%E5%93%AA%E9%87%8C%E4%BC%9A%E7%94%A8%E5%88%B0%E3%80%82\">http://localhost/a.XHTML不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，符合匹配规则但是不会匹配到，所以想想看实际应用中哪里会用到。</a></li>\n<li>访问 <a href=\"http://localhost/category/id/1111\">http://localhost/category/id/1111</a> 则最终匹配到规则H，因为以上规则都不匹配，这个时候应该是nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理服务器存在。</li>\n</ul>\n<p>==注意:如果uri包含正则表达式，则必须要有~ 或者 ~*标识。==</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实际中常用</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span>\n\n<span class=\"token comment\"># 第一个必选规则</span>\n\nlocation <span class=\"token operator\">=</span> / <span class=\"token punctuation\">&#123;</span>\n\nproxy_pass http://tomcat:8080/index\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span>\n\n<span class=\"token comment\"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span>\n\nlocation ^~ /static/ <span class=\"token punctuation\">&#123;</span>\n\nroot /webroot/static/<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation ~* <span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>gif<span class=\"token operator\">|</span>jpg<span class=\"token operator\">|</span>jpeg<span class=\"token operator\">|</span>png<span class=\"token operator\">|</span>css<span class=\"token operator\">|</span>js<span class=\"token operator\">|</span>ico<span class=\"token punctuation\">)</span>$ <span class=\"token punctuation\">&#123;</span>\n\nroot /webroot/res/<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span>\n\n<span class=\"token comment\">#非静态文件请求就默认是动态请求，自己根据实际把握</span>\n\n<span class=\"token comment\">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span>\n\nlocation / <span class=\"token punctuation\">&#123;</span>\n\nproxy_pass http://tomcat:8080/\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span>\n\n<span class=\"token comment\">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span>\n\n<span class=\"token comment\"># 第一个必选规则</span>\n\nlocation <span class=\"token operator\">=</span> / <span class=\"token punctuation\">&#123;</span>\n\nproxy_pass http://tomcat:8080/index\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span>\n\n<span class=\"token comment\"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span>\n\nlocation ^~ /static/ <span class=\"token punctuation\">&#123;</span>\n\nroot /webroot/static/<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\nlocation ~* <span class=\"token punctuation\">\\</span>.<span class=\"token punctuation\">(</span>gif<span class=\"token operator\">|</span>jpg<span class=\"token operator\">|</span>jpeg<span class=\"token operator\">|</span>png<span class=\"token operator\">|</span>css<span class=\"token operator\">|</span>js<span class=\"token operator\">|</span>ico<span class=\"token punctuation\">)</span>$ <span class=\"token punctuation\">&#123;</span>\n\nroot /webroot/res/<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span>\n\n<span class=\"token comment\">#非静态文件请求就默认是动态请求，自己根据实际把握</span>\n\n<span class=\"token comment\">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span>\n\nlocation / <span class=\"token punctuation\">&#123;</span>\n\nproxy_pass http://tomcat:8080/\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h1 id=\"反向代理配置\"><a href=\"#反向代理配置\" class=\"headerlink\" title=\"反向代理配置\"></a>反向代理配置</h1><p>配置文件结构：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">(</span>http 配置<span class=\"token punctuation\">)</span>\n\t\n\tserver<span class=\"token punctuation\">&#123;</span>\n\t\tlisten  <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\t\tserver_name localhost<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\"># 代理</span>\n\t\tlocation / <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\"># xxxx</span>\n\t\t\troot \n\t\t\tindex\n\t\t\tproxy_pass <span class=\"token comment\">#代理服务</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\tlocation / <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\"># xxxx</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\tserver<span class=\"token punctuation\">&#123;</span>\n\t\tlisten  <span class=\"token number\">443</span><span class=\"token punctuation\">;</span>\n\t\tserver_name localhost<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\"># 代理</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h1 id=\"负载均衡配置\"><a href=\"#负载均衡配置\" class=\"headerlink\" title=\"负载均衡配置\"></a>负载均衡配置</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">(</span>http 配置<span class=\"token punctuation\">)</span>\n\t\n\tupstream name<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\"># 负载均衡策略</span>\n\t\t<span class=\"token punctuation\">[</span>轮询<span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> weight <span class=\"token operator\">|</span> ip_hash <span class=\"token operator\">|</span> fair<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token comment\"># 负载均衡服务器列表</span>\n\t\tserver IP:Port weight <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">..</span>.\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\tserver<span class=\"token punctuation\">&#123;</span>\n\t\tlisten  <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\t\tserver_name localhost<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\"># 代理</span>\n\t\tlocation / <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\"># xxxx</span>\n\t\t\troot \n\t\t\tindex\n\t\t\t<span class=\"token comment\"># 代理服务</span>\n\t\t\tproxy_pass http://<span class=\"token punctuation\">[</span>upstream起的name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>分配策略：</p>\n<ul>\n<li>轮询(默认)：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除</li>\n<li>weight：weight代表权重，默认值为1，权重越高，被分配的客户端越多</li>\n<li>ip_hash：每个请求按访问ip的hash结果分配，这样每个访客固定访问同一台后端服务器</li>\n<li>fair(第三方)：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li>\n</ul>\n<h1 id=\"动静分离配置\"><a href=\"#动静分离配置\" class=\"headerlink\" title=\"动静分离配置\"></a>动静分离配置</h1><p>Nginx动静分离简单来说就是把动态跟静态请求分开,不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用Nginw.处理静态页面，Tomcat处理动态页面。动静分离从目前实现角度来讲大致分为两种：</p>\n<ol>\n<li>一种是纯粹把静态文件独立成单独的域名,放在独立的服务器上,也是目前主流推崇的方案;</li>\n<li>另外一种方法就是动态跟静态文件混合在一起发布，通过nginx来分开。</li>\n</ol>\n<p>通过location指定不同的后缀名实现不同的请求转发。通过expires参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体Expires定义:是给一个资源设定一个过期时间,也就是说无需去服务端验证,直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。(如果经常更新的文件，不建议使用Expires来缓存)，我这里设置3d，表示在这3天之内访问这个URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码200。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">(</span>http 配置<span class=\"token punctuation\">)</span>\n\t\n\tserver<span class=\"token punctuation\">&#123;</span>\n\t\tlisten  <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\t\tserver_name localhost<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\"># 代理</span>\n\t\tlocation /规则1 <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\"># xxxx</span>\n\t\t\troot \n\t\t\tindex\n\t\t\t<span class=\"token comment\"># 代理服务</span>\n\t\t\tproxy_pass http://<span class=\"token punctuation\">[</span>upstream起的name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\tlocation /规则2 <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\"># xxxx</span>\n\t\t\troot \n\t\t\tindex\n\t\t\t<span class=\"token comment\"># 代理服务</span>\n\t\t\tproxy_pass http://<span class=\"token punctuation\">[</span>upstream起的name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"高可用集群\"><a href=\"#高可用集群\" class=\"headerlink\" title=\"高可用集群\"></a>高可用集群</h1><p><img src=\"C:\\Users\\HP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220109203922527.png\" alt=\"image-20220109203922527\"></p>\n<ul>\n<li><p>需要两台Nginx服务器</p>\n</li>\n<li><p>需要Keepalived</p>\n<ul>\n<li><p>```bash<br>yum install keepalived -y</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- 在etc里面生成目录keepalived，有文件keepalived.conf\n\n  &#96;&#96;&#96;shell\n  # 全局配置\n  glocal_defs &#123;\n  \tnotification_email&#123;\n  \t\tacassen@firewall.loc\n  \t\tfailover@firewall.loc\n  \t\tsysadmin@firewall.loc\n  \t&#125;\n  \tnotification_email_from Alexandre.Cassen@firewall.loc\n  \tsmtp_server 主机IP\n  \tsmtp_counnect_timeout 30 \n  \trouter_id 主机名 # 访问到主机 &#x2F;etc&#x2F;hosts中编辑\n  &#125;\n  \n  # 检测脚本配置\n  vrrp_script chk_http_port &#123;\n  \tscript &quot;&#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx_check.sh&quot;\n  \tinterval 2 # 检测脚本执行的间隔\n  \tweight 2 # 权重，设置当前服务器的一个权重\n  &#125;\n  \n  # 虚拟IP的配置\n  vrrp_instance VI_1&#123;\n  \tstate MASTER # 备份服务器上讲MASTER换成BACKUP\n  \tinterface ens33 # 网卡\n  \tvirtual_router_id 51 # 主备机的virtual_router id 必须相同\n  \tpriority 100 # 主备机取不同的优先级，主机值较大，备份机较小\n  \tadvert_int 1 # 时间间隔\n  \tauthtication &#123;\n  \t\tauth_type PASS\n  \t\tauth_pass 1111\n  \t&#125;\n  \tviretual_ipaddress &#123;\n  \t\t# VRRP H虚拟地址\n  \t&#125;\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>检测脚本nginx_check.sh</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># !/bin/bash</span>\nA <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -C nginx -no-header <span class=\"token operator\">|</span><span class=\"token function\">wc</span> -l<span class=\"token variable\">`</span></span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$A</span> -eq <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\t/usr/local/nginx/sbin/nginx\n\t<span class=\"token function\">sleep</span> <span class=\"token number\">2</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -C nginx --no-header <span class=\"token operator\">|</span><span class=\"token function\">wc</span> -l<span class=\"token variable\">`</span></span> -eq <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\t\t<span class=\"token function\">killall</span> keepalived\n    <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>需要虚拟ip</p>\n</li>\n</ul>\n<h1 id=\"Nginx原理\"><a href=\"#Nginx原理\" class=\"headerlink\" title=\"Nginx原理\"></a>Nginx原理</h1><p><img src=\"C:\\Users\\HP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220109213113322.png\" alt=\"image-20220109213113322\"></p>\n<p>两个进程：worker&amp;master</p>\n<p><img src=\"C:\\Users\\HP\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220109213215084.png\" alt=\"image-20220109213215084\"></p>\n<p>多个worker使用的是争抢机制</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一个 master 和多个 woker 有好处</p></blockquote>\n<ol>\n<li>可以使用 nginx –s reload 热部署，利用 nginx 进行热部署操作</li>\n<li>每个 woker 是独立的进程，如果有其中的一个 woker 出现问题，其他 woker 独立的，继续进行争抢，实现请求过程，不会造成服务中断</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>设置多少个 woker 合适</p></blockquote>\n<p>Nginx和Redis类似都采用了IO多路复用机制，每个worker都是一个独立的进程，但每个进程里面只有一个主线程，通过异步非阻塞的方式来处理请求。每个worker的线程可以把一个CPU的i性能发挥到极致。所以worker数和服务器的CPU数相等是最合适的。设少了会浪费CPU，多了会导致CPU频繁的上下文切换</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>连接数 worker_connection</p></blockquote>\n<p>这个值表示每个worker进程所能建立连接的最大值，所以，一个Nginx能建立的最大连接数，应该是worker_connections * worker_processes。这里所说的是最大连接数。</p>\n<ul>\n<li>对于HTTP请求本地资源来说，能够支持的最大并发数量是 worker_connections * worker_processses，</li>\n<li>如果是支持http1.1 的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是: worker_connections * worker_processes / 2</li>\n<li>如果是HTTP作为反向代理来说，最大并发数量应该是worker_connection * worker_processes / 4</li>\n</ul>\n<p>因此作为反向代理服务器，每个并发会与客户端的连接和与后端服务的连接，会占用两个连接</p>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"[解决办法]\"></a>[解决办法]</h1><h2 id=\"阿里云服务器80端口被占用解决方案\"><a href=\"#阿里云服务器80端口被占用解决方案\" class=\"headerlink\" title=\"阿里云服务器80端口被占用解决方案\"></a>阿里云服务器80端口被占用解决方案</h2><p>fuser -k 80/tcp命令停止阿里云的占用进程</p>\n","text":"Nginx概述Nginx (engine x)是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务 Nginx常用命令cd /usr/local/nginx/sbin/ ./nginx #启动 ./nginx -s stop # 停止 ./n...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"运维","slug":"运维","count":2,"path":"api/tags/运维.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">Nginx概述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">Nginx常用命令</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx%E8%AF%AD%E6%B3%95%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">Nginx语法匹配规则</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">反向代理配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">负载均衡配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">动静分离配置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">高可用集群</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Nginx原理</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95\"><span class=\"toc-text\">[解决办法]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A880%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">阿里云服务器80端口被占用解决方案</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java开发手册","uid":"982a6bb2fed072725a80b0baababe5b6","slug":"Java开发手册","date":"2022-02-19T16:00:00.000Z","updated":"2022-05-18T13:47:26.522Z","comments":true,"path":"api/articles/Java开发手册.json","keywords":null,"cover":[],"text":"零、前言@author：韩霄杰(hanxj_a) @date: 2022.02.20 @update:2022.03.14 / 2022.03.15 / NPE即 NullPointerException JSL即《The Java Language Specification》...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux快速上手","uid":"65246f4baaabadb30d023b3b91b63fa2","slug":"Linux","date":"2020-12-31T16:00:00.000Z","updated":"2022-05-18T13:48:06.116Z","comments":true,"path":"api/articles/Linux.json","keywords":null,"cover":[],"text":"Linux基础 Kali Linux ： 安全渗透测试使用 开机登录开机会启动许多程序。它们在Windows叫做”服务” ( service )，在Linux就叫做”守护进程” ( daemon ) 。开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"运维","slug":"运维","count":2,"path":"api/tags/运维.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}